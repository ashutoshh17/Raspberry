Blinking LED
Aim: blinking led to switch on and off



Algorithm
Initialize GPIO Library: Import the necessary libraries and configure the GPIO settings.
Setup GPIO Pins:
Set up GPIO pin 8 as an output pin.
Initialize the pin state to LOW (LED off).
Blinking Loop:
Turn the LED on by setting GPIO pin 8 to HIGH.
Wait for 1 second.
Turn the LED off by setting GPIO pin 8 to LOW.
Wait for 1 second.
Repeat the above steps indefinitely.
Handle Exit:
On a keyboard interrupt (Ctrl+C), clean up GPIO settings to avoid warnings and reset the pin states.





Libraries used

RPi. GPIO
time
Component:
1] LED
2]Raspberry pi

Code:
import RPi.GPIO as GPIO
from time import sleep
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(7,GPIO.OUT,initial=GPIO.LOW)
while True:
    GPIO.output(7,GPIO.HIGH)
    print("LED on")
    sleep(1)
    GPIO.output(7,GPIO.LOW)
    print("LED off")
sleep(1)
Screenshot:









4 LED Blink
Aim : 
To study different input-output controls using the Raspberry Pi by implementing a circuit to blink four LEDs in sequence.
Using LED
 we will control four LEDs connected to GPIO pins of the Raspberry Pi, making each LED blink in a sequence.
To study different input-output controls using the Raspberry Pi by implementing a circuit to blink four LEDs in sequence.
Circuit dig



Algorithm
Initialize GPIO Library: Import the necessary libraries and configure the GPIO settings.
Setup GPIO Pins:
Set up GPIO pins 8, 10, 12, and 16 as output pins.
Initialize the pin states to LOW (LEDs off).
Blinking Sequence:
Turn LED 1 on, wait for 1 second, and turn it off.
Turn LED 2 on, wait for 1 second, and turn it off.
Turn LED 3 on, wait for 1 second, and turn it off.
Turn LED 4 on, wait for 1 second, and turn it off.
Repeat the above sequence indefinitely.
Handle Exit:
On a keyboard interrupt (Ctrl+C), clean up GPIO settings to avoid warnings and reset the pin states.
Libraries used

RPi. GPIO
time
code:
import RPi.GPIO as GPIO
from time import sleep
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(8,GPIO.OUT,initial=GPIO.LOW)
GPIO.setup(10,GPIO.OUT,initial=GPIO.LOW)
GPIO.setup(3,GPIO.OUT,initial=GPIO.LOW)
GPIO.setup(5,GPIO.OUT,initial=GPIO.LOW)

while True:
    GPIO.output(8,GPIO.HIGH)
    print("LED on")
    sleep(1)
    GPIO.output(8,GPIO.LOW)
    print("LED off")
sleep(1)
    GPIO.output(10,GPIO.HIGH)
    print("LED on")
    sleep(1)
    GPIO.output(10,GPIO.LOW)
    print("LED off")
sleep(1)
    GPIO.output(3,GPIO.HIGH)
    print("LED on")
    sleep(1)
    GPIO.output(3,GPIO.LOW)
    print("LED off")
sleep(1)
    GPIO.output(5,GPIO.HIGH)
    print("LED on")
    sleep(1)
    GPIO.output(5,GPIO.LOW)
    print("LED off")
sleep(1)



Video:  

https://drive.google.com/file/d/1A6NwogwIAqdw8m3oKYTwk3jVZlA1yRSV/view?usp=drive_link





2 ON 2 OFF Pattern
Aim : To study different input-output controls using the Raspberry Pi by implementing a circuit to blink four LEDs in a serial pattern.

Using LED
we will control four LEDs connected to GPIO pins of the Raspberry Pi. The LEDs will blink in a serial fashion, one after the other, in a loop

Circuit dig



Algorithm

Initialize GPIO Library: Import the necessary libraries and configure the GPIO settings.
Setup GPIO Pins:
Set up GPIO pins 8, 10, 12, and 16 as output pins.
Initialize all pins to LOW (LEDs off).
Serial Blinking Pattern:
Turn LED 1 on, wait for 0.5 seconds, then turn LED 1 off.
Turn LED 2 on, wait for 0.5 seconds, then turn LED 2 off.
Turn LED 3 on, wait for 0.5 seconds, then turn LED 3 off.
Turn LED 4 on, wait for 0.5 seconds, then turn LED 4 off.
Repeat the above sequence indefinitely.
Handle Exit:
On a keyboard interrupt (Ctrl+C), clean up GPIO settings to avoid warnings and reset the pin states.


Libraries used

RPi. GPIO
time



Code:
import RPi.GPIO as GPIO
from time import sleep
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(8,GPIO.OUT,initial=GPIO.LOW)
GPIO.setup(10,GPIO.OUT,initial=GPIO.LOW)
GPIO.setup(3,GPIO.OUT,initial=GPIO.LOW)
GPIO.setup(5,GPIO.OUT,initial=GPIO.LOW)
while True:
    GPIO.output(8,GPIO.HIGH)
    GPIO.output(10,GPIO.HIGH)
    GPIO.output(3,GPIO.LOW)
    GPIO.output(5,GPIO.LOW)
    sleep(1)
    GPIO.output(8,GPIO.LOW)
    GPIO.output(10,GPIO.LOW)
    GPIO.output(3,GPIO.HIGH)
    GPIO.output(5,GPIO.HIGH)
    sleep(1)


OUTPUT


 


Serial Blinking
Aim : To study different input-output controls using the Raspberry Pi by implementing a circuit to blink four LEDs in a serial pattern.

Using LED
we will control four LEDs connected to GPIO pins of the Raspberry Pi. The LEDs will blink in a serial fashion, one after the other, in a loop

Circuit dig



Algorithm

Initialize GPIO Library: Import the necessary libraries and configure the GPIO settings.
Setup GPIO Pins:
Set up GPIO pins 8, 10, 12, and 16 as output pins.
Initialize all pins to LOW (LEDs off).
Serial Blinking Pattern:
Turn LED 1 on, wait for 0.5 seconds, then turn LED 1 off.
Turn LED 2 on, wait for 0.5 seconds, then turn LED 2 off.
Turn LED 3 on, wait for 0.5 seconds, then turn LED 3 off.
Turn LED 4 on, wait for 0.5 seconds, then turn LED 4 off.
Repeat the above sequence indefinitely.
Handle Exit:
On a keyboard interrupt (Ctrl+C), clean up GPIO settings to avoid warnings and reset the pin states.


Libraries used

RPi. GPIO
time


import RPi.GPIO as GPIO
from time import sleep
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(8,GPIO.OUT,initial=GPIO.LOW)
GPIO.setup(10,GPIO.OUT,initial=GPIO.LOW)
GPIO.setup(3,GPIO.OUT,initial=GPIO.LOW)
GPIO.setup(5,GPIO.OUT,initial=GPIO.LOW)
while True:
    GPIO.output(8,GPIO.HIGH)
    sleep(1)
    GPIO.output(10,GPIO.HIGH)
    sleep(1)
    GPIO.output(3,GPIO.HIGH)
    sleep(1)
    GPIO.output(5,GPIO.HIGH)
    sleep(1)
    GPIO.output(8,GPIO.LOW)
sleep(1)
    GPIO.output(10,GPIO.LOW)
    sleep(1)
    GPIO.output(3,GPIO.LOW)
    sleep(1)
    GPIO.output(5,GPIO.LOW)
sleep(1)

Output:





Push Button control


Aim : To study input-output controls using the Raspberry Pi by implementing a circuit to control an LED based on the state of a push button. The LED will turn on when the button is pressed and turn off when the button is released.
Using LED and Push Button
In this practical, we will control an LED connected to a GPIO pin of the Raspberry Pi. The LED will be turned on or off depending on the state of a push button connected to another GPIO pin.


Circuit dig



Algorithm
Initialize GPIO Library: Import the necessary libraries and configure the GPIO settings.
Setup GPIO Pins:
Set up GPIO pin 8 as an output pin for the LED.
Set up GPIO pin 10 as an input pin for the push button with a pull-down resistor.
Button Controlled Blinking:
Continuously check the state of the push button.
If the button is pressed (GPIO pin 10 reads HIGH), turn the LED on (GPIO pin 8 HIGH).
If the button is not pressed (GPIO pin 10 reads LOW), turn the LED off (GPIO pin 8 LOW).
Handle Exit:
On a keyboard interrupt (Ctrl+C), clean up GPIO settings to avoid warnings and reset the pin states.


Libraries used

RPi. GPIO
time

code:
import RPi.GPIO as GPIO
import time
import serial
from time import sleep


# Setup GPIO pins
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(3, GPIO.OUT, initial=GPIO.LOW) # LED
GPIO.setup(5, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Push Button
while True:
if(GPIO.input(5)==1):
GPIO.output(3,HIGH)
else
GPIO.output(3,LOW)










Buzzer with PUSH Button
Aim : To study input-output controls using the Raspberry Pi by implementing a circuit to control an LED and a buzzer based on the state of a push button. The LED and buzzer will turn on when the button is pressed and turn off when the button is released.
Using LED, Buzzer, and Push Button
In this practical, we will control an LED and a buzzer connected to GPIO pins of the Raspberry Pi. Both the LED and the buzzer will be activated when a push button is pressed.


Circuit dig



Algorithm
Initialize GPIO Library: Import the necessary libraries and configure the GPIO settings.
Setup GPIO Pins:
Set up GPIO pin 8 as an output pin for the LED.
Set up GPIO pin 12 as an output pin for the buzzer.
Set up GPIO pin 10 as an input pin for the push button with a pull-down resistor.
Button Controlled LED and Buzzer:
Continuously check the state of the push button.
If the button is pressed (GPIO pin 10 reads HIGH), turn the LED on (GPIO pin 8 HIGH) and the buzzer on (GPIO pin 12 HIGH).
If the button is not pressed (GPIO pin 10 reads LOW), turn the LED off (GPIO pin 8 LOW) and the buzzer off (GPIO pin 12 LOW).
Handle Exit:
On a keyboard interrupt (Ctrl+C), clean up GPIO settings to avoid warnings and reset the pin states.


Libraries used

RPi. GPIO
time

code:

import RPi.GPIO as GPIO
import time
import serial
from time import sleep


# Setup GPIO pins
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(3, GPIO.OUT, initial=GPIO.LOW) # Buzzer
GPIO.setup(5, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Push Button
while True:
if(GPIO.input(5)==1):
GPIO.output(3,HIGH)
else
GPIO.output(3,LOW)
























OUTPUT






























Practical no. 3



Aim : To study input-output controls using the Raspberry Pi by implementing a circuit to display the current time on a 4-digit 7-segment display.
4 digit 7 segment display to show time

Using 4-Digit 7-Segment Display
In this practical, we will use a 4-digit 7-segment display to show the current time. Each digit of the display is controlled by individual GPIO pins.

Circuit dig




Algorithm



Libraries used

RPi. GPIO
Time
datetime


1] 4 digit 7 segment display
2]Raspberry pi

Aim: Controlling 4 digit display and showing military time.

Code:
import time
import datetime
import RPi.GPIO as GPIO
import tm1637
from time import sleep

try:
	import thread
except ImportError
import _thread as thread
Display = tm1637.TM1637(CLK=21,DIO=20,brightness=1.0)
try: 
print(“Starting clock in the background (press ctrl+c to stop):”)
Display.StartClock(military_time=True)
Display.setBrightness(1.0)
while True:
Display.ShowDoublepoint(True)
sleep(1)
Display.ShowDoublepoint(False)
sleep(1)
Display.StopClock()
thread.interrupt_main()
except KeyboardInterrupt:
print(“Properly closing the clock and open GPIO pins”)
Display.cleanup()

Screenshot:
























Practical no. 4

Using Telegram app for IOT

Telegram BOT
Aim: Controlling Bot based on the command provided.

Component:
1] Telegram 

Code:
import time,datetime
import telepot 
from telepot.loop import MessageLoop
Now = datetime.datetime.now()
def action(msg):
Chat_id = msg[‘text’]
Print “Received:%s” % command
If command == “/hi”:
telegram_bot.sendMessage(chat_id,str(“Hi!, CircuitDigest”))
elif command == “/time”:
telegram_bot.sendMessage(chat_id,str(now.hour)+str(“:”)+str(now.minute))
elif command == “/logo”:
telegram_bot.sendPhoto(chat_id,photo=”jpg_location.jpg”)
elif command == “/file”:
telegram_bot.sendAudio(chat_id,audio=open(“mp3_location.mp3”))
telegram_bot = telepot.Bot(“api_key”)
print(telegram_bot.getMe())
MessageLoop(telegram_bot,action).run_as_thread()
print(“up and Running”)
while 1:
time.sleep(10)





controlling LED using BOT
Aim: Controlling LED based on input provided in bot

Component:
1] LED
2]Raspberry pi
3] Telegram

import time,datetime
from time import sleep
import RPi.GPIO as GPIO
import telepot 
from telepot.loop import MessageLoop
Now = datetime.datetime.now()
GPIO.setwarnings(False)
GPIO.setup(8,GPIO.OUT,initial=GPIO.LOW)
GPIO.setup(10,GPIO.OUT,initial=GPIO.LOW)
GPIO.setup(3,GPIO.OUT,initial=GPIO.LOW)
GPIO.setup(5,GPIO.OUT,initial=GPIO.LOW)
def action(msg):
chat_id = msg[‘text’]
Print “Received:%s” % command
If command == “/1”:
    GPIO.output(8,GPIO.HIGH)
    GPIO.output(10,GPIO.LOW)
      	    GPIO.output(3,GPIO.LOW)
 	    GPIO.output(5,GPIO.LOW)
elif command == “/2”:
    GPIO.output(8,GPIO.LOW)
    GPIO.output(10,GPIO.HIGH)
      	    GPIO.output(3,GPIO.LOW)
 	    GPIO.output(5,GPIO.LOW)
elif command == “/3”:
    GPIO.output(8,GPIO.LOW)
    GPIO.output(10,GPIO.LOW)
      	    GPIO.output(3,GPIO.HIGH)
 	    GPIO.output(5,GPIO.LOW)



elif command == “/4”:
    GPIO.output(8,GPIO.LOW)
    GPIO.output(10,GPIO.LOW)
      	    GPIO.output(3,GPIO.LOW)
 	    GPIO.output(5,GPIO.HIGH)
elif command == “/all”:
    GPIO.output(8,GPIO.HIGH)
    GPIO.output(10,GPIO.HIGH)
      	    GPIO.output(3,GPIO.HIGH)
 	    GPIO.output(5,GPIO.HIGH)
elif command == “/off”:
    GPIO.output(8,GPIO.LOW)
    GPIO.output(10,GPIO.LOW)
      	    GPIO.output(3,GPIO.LOW)
 	    GPIO.output(5,GPIO.LOW)


telegram_bot = telepot.Bot(“7272725682:AAEJe5zORTyW0yQut6Neo1QnpUZBWqSvldg”)
print(telegram_bot.getMe())
MessageLoop(telegram_bot,action).run_as_thread()
print(“up and Running”)
while 1:
time.sleep(10)


Practical no. 5
Use RFID tag to control entry
Aim: Reading token from RFID tag

Component:
1] EM-18
2]Raspberry pi

Task-1: Read RFID Card through EM18 
Code:
I

2]Raspberry pi

Task-1: Read RFID Card through EM18

Code:

import RPi.GPIO as gpio

import time

import serial

from time import sleep

gpio.setwarnings (False)

gpio.setmode (gpio.BOARD)

def read_rfid():

ser=serial. Serial("/dev/ttyUSB0")

ser.baudrate = 9600

ser.baudrate = 9600

data=ser.read(12)

ser.close()

return data

try:

while 1:

| | print("Place the card")

| sleep(1)

| print("Place the card")

sleep(1)

| id=read_rfid()

| print(id)

finally:

gpio.cleanup()












Task-2: Press push button to show hello and then Read the card and glow led and turn on buzzer
Aim: Glowing LED and turning on Buzzer based on RFID tag

Component:
1] LED
2]Raspberry pi
3] Push button
4] Buzzer

Code:
import RPi.GPIO as gpio

import time

import serial

I

from time import sleep

gpio.setwarnings (False)

gpio.setmode (gpio.BOARD) gpio.setup(7, gpio. IN, pull_up_down=gpio. PUD_DOWN) gpio.setup(3,gpio. OUT, initial-gpio.LOW) gpio.setup(5, gpio. OUT, initial-gpio.LOW)

def read_rfid():

def read_rfid():1

ser=serial.Serial("/dev/ttyUSB0")

ser.baudrate = 9600

data=ser.read(12)

sleep(2)

ser.close()

return data

try:

while 1:

gpio.output (3, gpio. HIGH)

gpio.output (5,gpio.LOW)

print("Waiting for button press...")

gpio.wait_for_edge(7, gpio. FALLING) # Wai

print("hello")

print("Place the card")

print("Place the card")

sleep(1)

id=read_rfid() I

print("1")

gpio.output(3, gpio.LOW)

gpio.output(5,gpio. HIGH)

sleep(2)

finally:

print(id)

gpio.cleanup()














Task-3: Attendance system
Aim: Putted Authorization on attendance system based on RFID tag

Component:
1] LED
2]Raspberry pi
3] Push button
4] Buzzer

Code:
1 import RPi.GPIO as gpio



import time

 import serial


 from time import sleep


gpio.setwarnings (False)

gpio.setmode (gpio. BOARD)

gpio.setup(7, gpio. IN, pull_up_down=gpio.PUD_DOWN)

gpio.setup(3,gpig. OUT, initial-gpio.LOW)

gpio.setup(5, gpio. OUT, initial-gpio.LOW)

def read_rfid():

ser=serial.Serial("/dev/ttyUSB0")

gpio.setup(3, gpio.OUT, initial-gpio.LOW)

gpio.setup(5,gpio.OUT, initial=gpio.LOW)


def read_rfid():

ser=serial.Serial("/dev/ttyUSB0")

ser.baudrate = 9600

data=ser.read(12)

sleep (2)

ser.close()

return data


def entry():



ser-serial. Serial("/dev/ttyUSB0")

def entry():

ser=serial.Serial("/dev/ttyUSB0")

ser.baudrate = 9600 print("allocate entry 1")

data=ser.read(12)

sleep(1)

return data


try:

I #data entry


id1 =0
id1 = entry()

print(id1)

while 1:

gpio.output(3, gpio. HIGH)

gpio.output (5, gpio.LOW)

print("take attendence")

print("place your card")

print("place your card")

id=read_rfid()

print(id1)

print(id)

if(id==id1):

print("hello")

gpio.output(3,gpio.LOW)

sleep(2)

else:

print("no")

kdanti Info in attendance.items()

print(id1)

print(id)

if(id==id1):

print("hello")

gpio.output(3,gpio.LOW)

sleep(2)

else:

print("no")

gpio.output (5, gpio.HIGH)

#print("1")

sleep(1)



finally:



gpio.cleanup()
























PRACTICAL NO. 6

Fingerprint scanner
Connections
USB to Serial Converter - VCC to VCC of FingerPrint scanner
USB to Serial Converter - GND to GND of FingerPrint scanner
USB to Serial Converter - RxD to TxD of FingerPrint scanner
USB to Serial Converter - TxD to RxD of FingerPrint scanner


Code


import time
from pyfingerprint.pyfingerprint import PyFingerprint
import RPi.GPIO as gpio
gpio.setwarnings(False)
gpio.setmode(gpio.BCM)
try:
f = PyFingerprint('/dev/ttyUSB0', 57600, 0xFFFFFFFF, 0x00000000)
except Exception as e:
print('Exception message: ' + str(e))
exit(1)
def enrollFinger():
print('Waiting for finger...')
while ( f.readImage() == False ):
pass
f.convertImage(0x01)
result = f.searchTemplate()
positionNumber = result[0]
if ( positionNumber >= 0 ):
print('Finger already exists at position #' +str(positionNumber))
time.sleep(2)
return
print('Remove finger...')
time.sleep(2)
print('Waiting for same finger again...')
while ( f.readImage() == False ):
pass
f.convertImage(0x02)
if ( f.compareCharacteristics() == 0 ):
print ("Fingers do not match")
time.sleep(2)
return
f.createTemplate()
positionNumber = f.storeTemplate()
print('Finger enrolled successfully!')
print('New template position #' + str(positionNumber))
time.sleep(2)
def searchFinger():
try:
print('Waiting for finger...')
while( f.readImage() == False ):
pass
time.sleep(.5)
return
f.convertImage(0x01)
result = f.searchTemplate()
positionNumber = result[0]
accuracyScore = result[1]
if positionNumber == -1 :
print('No match found!')
time.sleep(2)
return
else:
print('Found finger at position #' + str(positionNumber))
time.sleep(2)
except Exception as e:
print('Operation failed!')
print('Exception message: ' + str(e))
exit(1)
def delete

